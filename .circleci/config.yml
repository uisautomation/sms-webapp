version: 2

jobs:
  build:
    machine: true
    environment:
      # Set the required secrets for production to mock values here. Although they
      # are not real values, the production image will no start without them set
      # to some value even if the precise value does not affect the outcome of
      # calling the health-check endpoint.
      JWPLATFORM_API_KEY: 'api-key-mock'
      JWPLATFORM_API_SECRET: 'api-key-secret'
      JWPLATFORM_EMBED_PLAYER_KEY: 'embed-player-key'
      GCLOUD_PROJECT: 'uis-automation-media'
    steps:
      - checkout

      - run:
          name: Install codecov
          command: pip install codecov

      - run:
          name: Create mock secrets.env file
          command: |
            cp secrets.env.in secrets.env

      - run:
          name: Test production container health check
          command: |
            # Start production containers
            ./compose.sh production up -d

            # Fetch endpoint
            ./compose/wait-for-it.sh localhost:8000 -t 15
            ./compose.sh production exec production_app ./manage.py migrate
            curl --verbose --location --output /tmp/healthz --fail --connect-timeout 2 http://localhost:8000/healthz

            # Before it goes away, tag the production container
            IMAGE=$(./compose.sh production images -q production_app)
            echo "-- Production container image id: $IMAGE"
            [ -z "${IMAGE}" ] && (echo "could not determined image id" >&2; exit 1)
            docker tag ${IMAGE} production:latest

            # Stop production containers
            ./compose.sh production down

      - run:
          name: Run tests
          command: |
            ./compose.sh tox run -v $PWD:/tmp/workspace -e COVERAGE_FILE=/tmp/workspace/.coverage -e COVERAGE_XML_FILE=/tmp/workspace/coverage.xml -e TOXINI_ARTEFACT_DIR=/tmp/workspace/build --rm tox
            ./compose.sh tox down

      - store_artifacts:
          path: ~/project/build/htmlcov
          destination: coverage-report

      - store_artifacts:
          path: ~/project/build/doc
          destination: documentation

      - run:
          name: Run codecov
          command: codecov

      - run:
          name: Tag & Push docker image
          command: |
            if [ ! -z "$GCLOUD_SERVICE_KEY" ]; then
              docker tag production:latest eu.gcr.io/$GCLOUD_PROJECT/$CIRCLE_PROJECT_REPONAME:sha-$CIRCLE_SHA1
              docker tag production:latest eu.gcr.io/$GCLOUD_PROJECT/$CIRCLE_PROJECT_REPONAME:build-$CIRCLE_BUILD_NUM

              echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
              gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
              gcloud --quiet config set project $GCLOUD_PROJECT

              docker login -u _json_key --password-stdin https://eu.gcr.io < ${HOME}/gcloud-service-key.json

              docker push eu.gcr.io/$GCLOUD_PROJECT/$CIRCLE_PROJECT_REPONAME:sha-$CIRCLE_SHA1
              docker push eu.gcr.io/$GCLOUD_PROJECT/$CIRCLE_PROJECT_REPONAME:build-$CIRCLE_BUILD_NUM
            else
              echo "Skipping push step as there are no GCloud secrets"
            fi

      - deploy:
          name: Save build number (for deploy steps)
          command: |
            echo ${CIRCLE_BUILD_NUM} > docker-build_number.txt

      - persist_to_workspace:
          root: .
          paths:
            - build/doc
            - docker-build_number.txt

  docs:
    machine: true
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Deploy to GitHub Pages
          command: ./.circleci/deploy-ghpages.sh ./build/doc

  deploy:
    machine: true
    environment:
      DEPLOY_CIRCLE_PROJECT_USERNAME: 'uisautomation'
      DEPLOY_CIRCLE_PROJECT_REPONAME: 'media-deploy'
      DEPLOY_CIRCLE_BRANCH: 'deploy-to-development'
      DEPLOY_CIRCLECI_JOB_NAME: 'deploy'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - deploy:
          name: deploy to development
          command: |
            if [ ! -z "$GCLOUD_SERVICE_KEY" ]; then
              curl --user ${DEPLOY_CIRCLE_API_PROJECT_TOKEN}: \
                --data build_parameters[CIRCLE_JOB]=$DEPLOY_CIRCLECI_JOB_NAME \
                --data build_parameters[IMAGE_TAG]=build-$(cat docker-build_number.txt) \
                https://circleci.com/api/v1.1/project/github/$DEPLOY_CIRCLE_PROJECT_USERNAME/$DEPLOY_CIRCLE_PROJECT_REPONAME/tree/$DEPLOY_CIRCLE_BRANCH
            else
              echo "Skipping deploy as there are no GCloud secrets"
            fi

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - docs:
          requires:
          - build
          filters:
            branches:
              only: master
      - request-deploy:
          type: approval
          requires:
          - build
      - deploy:
          requires:
            - request-deploy
